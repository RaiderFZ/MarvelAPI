{"version":3,"file":"static/js/156.5641f91d.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SinglePage.js","hooks/http.hook.js","service/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return ( \r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"error gif\"  />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../../service/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nconst SinglePage = ({Component, dataType}) => {\r\n        const {id} = useParams();\r\n        const [data, setData] = useState(null);\r\n        const {loading, error, getComic, getCharacter, clearError} = useMarvelService();\r\n\r\n        useEffect(() => {\r\n            updateData()\r\n        }, [id])\r\n\r\n        const updateData = () => {\r\n            clearError();\r\n\r\n            switch (dataType) {\r\n                case 'comic':\r\n                    getComic(id).then(onDataLoaded);\r\n                    break;\r\n                case 'character':\r\n                    getCharacter(id).then(onDataLoaded);\r\n            }\r\n        }\r\n\r\n        const onDataLoaded = (data) => {\r\n            setData(data);\r\n        }\r\n\r\n        const errorMessage = error ? <ErrorMessage/> : null;\r\n        const spinner = loading ? <Spinner/> : null;\r\n        const content = !(loading || error || !data) ? <Component data={data}/> : null;\r\n\r\n        return (\r\n            <>\r\n                <AppBanner/>\r\n                {errorMessage}\r\n                {spinner}\r\n                {content}\r\n            </>\r\n        )\r\n}\r\n\r\nexport default SinglePage;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'appLication/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if(!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status} `);\r\n            }\r\n\r\n            const data = await response.json();\r\n            \r\n            setLoading(false);\r\n            return data\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=1d225212b3f692c72dee1aa0829e1806';\r\n    const _baseOffset = 600;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`\r\n        ${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_tranformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`\r\n        ${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _tranformCharacter(res.data.results[0])\r\n    }\r\n\r\n\tconst getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t};\r\n\r\n    const getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n    const getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_tranformCharacter);\r\n\t};\r\n\r\n    const _tranformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description || \"not a found\",\r\n            thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.name,\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.`\r\n            : \"No information about the number of pages\",\r\n            description: comics.description || \"not a found\",\r\n            thumbnail: `${comics.thumbnail.path}.${comics.thumbnail.extension}`,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            price: comics.prices[0].price\r\n            ? `${comics.prices[0].price}$`\r\n            : \"not available\",\r\n        }\r\n    }\r\n\r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic, getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","_ref","Component","dataType","id","useParams","data","setData","useState","loading","error","getComic","getCharacter","clearError","useMarvelService","useEffect","updateData","then","onDataLoaded","errorMessage","spinner","Spinner","content","_Fragment","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","json","e","message","_apiBase","_apiKey","_tranformCharacter","char","name","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","results","map","res","getAllComics","getCharacterByName"],"sourceRoot":""}