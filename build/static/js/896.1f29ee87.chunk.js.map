{"version":3,"file":"static/js/896.1f29ee87.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","hooks/http.hook.js","service/MarvelService.js"],"sourcesContent":["import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return ( \r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"error gif\"  />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from \"../../service/MarvelService\";\n\nimport './randomChar.scss';\n\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000)\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error) ? <View char={char}/> : null; \n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\" onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )  \n}\n \nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit': 'cover'};\n    if(thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit': 'contain'}\n    }\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useEffect, useState, useRef} from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from \"../../service/MarvelService\";\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(600);\n    const [charEnded, setCharEnded] = useState(false);\n    \n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);;\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if(newCharList.lengh < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList])\n        setNewItemLoading(newItemLoading => false)\n        setOffset(offset => offset + 9)\n        setCharEnded(charEnded => ended)\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus()\n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <li \n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n    \n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport {PropTypes} from 'prop-types'\n\nimport Skeleton from '../skeleton/Skeleton'\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../service/MarvelService';\n\nimport './charInfo.scss';\n\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null)\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n    const updateChar = () => {\n        clearError();\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton/>\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null; \n    \n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n\n    let imgStyle = {'objectFit': 'cover'};\n    if(thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit': 'contain'}\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.lenght > 0 ? null : 'There in no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if ( i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\n\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo)\r\n        this.setState({\r\n            error:true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../service/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\"\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null)\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id)\r\n    } \r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>   \r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>  \r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'appLication/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if(!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status} `);\r\n            }\r\n\r\n            const data = await response.json();\r\n            \r\n            setLoading(false);\r\n            return data\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=1d225212b3f692c72dee1aa0829e1806';\r\n    const _baseOffset = 600;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`\r\n        ${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_tranformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`\r\n        ${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _tranformCharacter(res.data.results[0])\r\n    }\r\n\r\n\tconst getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t};\r\n\r\n    const getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n    const getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_tranformCharacter);\r\n\t};\r\n\r\n    const _tranformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description || \"not a found\",\r\n            thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.name,\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.`\r\n            : \"No information about the number of pages\",\r\n            description: comics.description || \"not a found\",\r\n            thumbnail: `${comics.thumbnail.path}.${comics.thumbnail.extension}`,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            price: comics.prices[0].price\r\n            ? `${comics.prices[0].price}$`\r\n            : \"not available\",\r\n        }\r\n    }\r\n\r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic, getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","char","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","RandomChar","setChar","useState","loading","error","getCharacter","clearError","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","lengh","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","disabled","Skeleton","_Fragment","comics","lenght","charId","skeleton","ErrorBoundary","Component","constructor","arguments","state","componentDidCatch","errorInfo","console","log","this","setState","render","CharSearchForm","getCharacterByName","results","length","Link","to","concat","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","component","MainPage","selectedChar","Helmet","CharList","CharInfo","decoration","request","useHttp","setLoading","setError","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","Error","status","data","json","message","_apiBase","_apiKey","_tranformCharacter","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","res","getAllComics","getComic"],"sourceRoot":""}