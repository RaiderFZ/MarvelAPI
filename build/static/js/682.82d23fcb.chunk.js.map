{"version":3,"file":"static/js/682.82d23fcb.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/http.hook.js","service/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return ( \r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"error gif\"  />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport useMarvelService from \"../../service/MarvelService\";\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './comicsList.scss';\n\nconst ComicsList = () => {\n\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setnewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {loading, error, getAllComics} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n        setComicsList([...comicsList, ...newComicsList]);\n        setnewItemLoading(false);\n        setOffset(offset + 8);\n        setComicsEnded(ended);\n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            \n            return (\n                <li className=\"comics__item\" key={i}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link> \n                </li>\n            )\n        });\n    \n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul> \n        )\n    }\n\n    const items = renderItems(comicsList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                disabled={newItemLoading} \n                style={{'display' : comicsEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import { Helmet } from \"react-helmet\";\r\n\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Page with list of our comics\"\r\n                />\r\n                <title>Comics Page</title>\r\n            </Helmet>\r\n            <AppBanner/>\r\n            <ComicsList/>   \r\n        </>\r\n        \r\n    )\r\n}\r\n\r\nexport default ComicsPage","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'appLication/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if(!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status} `);\r\n            }\r\n\r\n            const data = await response.json();\r\n            \r\n            setLoading(false);\r\n            return data\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=1d225212b3f692c72dee1aa0829e1806';\r\n    const _baseOffset = 600;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`\r\n        ${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_tranformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`\r\n        ${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _tranformCharacter(res.data.results[0])\r\n    }\r\n\r\n\tconst getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t};\r\n\r\n    const getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n    const getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_tranformCharacter);\r\n\t};\r\n\r\n    const _tranformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description || \"not a found\",\r\n            thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.name,\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.`\r\n            : \"No information about the number of pages\",\r\n            description: comics.description || \"not a found\",\r\n            thumbnail: `${comics.thumbnail.path}.${comics.thumbnail.extension}`,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            price: comics.prices[0].price\r\n            ? `${comics.prices[0].price}$`\r\n            : \"not available\",\r\n        }\r\n    }\r\n\r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic, getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","ComicsList","comicsList","setComicsList","useState","newItemLoading","setnewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","loading","error","getAllComics","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","items","arr","map","item","i","Link","to","concat","id","thumbnail","title","price","renderItems","errorMessage","spinner","Spinner","disabled","onClick","ComicsPage","_Fragment","Helmet","name","content","request","clearError","useHttp","setLoading","setError","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_tranformCharacter","char","description","path","extension","homepage","urls","wiki","comics","_transformComics","_comics$textObjects$","pageCount","language","textObjects","prices","getAllCharacters","results","getCharacter","res","getComic","getCharacterByName"],"sourceRoot":""}